#!/bin/bash
# -*- mode: sh; -*-
set -o errexit
set -o nounset
set -o pipefail

if systemd-detect-virt --quiet; then exit; fi

# {{- template "yay.sh" -}}
# ref: <https://wiki.archlinux.org/title/Libvirt#Installation>
# ref: <https://wiki.archlinux.org/title/QEMU#Installation>
packages=(
  # server
  dmidecode # for DMI system info support
  dnsmasq   # for the default NAT/DHCP networking
  libvirt
  openbsd-netcat # for remote management over SSH
  qemu-full      # hypervisor
  # client
  virt-manager
)
yay-install "${packages[@]}"

# ref: <https://wiki.archlinux.org/title/Libvirt#Using_libvirt_group>
# {{- template "group-add.sh" }}
group-add "libvirt"

sudo systemctl enable --now libvirtd.service

# Networking
sudo virsh net-autostart default

# Storage Pool
function pool-define() {
  local pool="$1"
  local target="$2"
  local target_old
  target_old="$(sudo virsh pool-dumpxml "$pool" 2> /dev/null |
    yq eval ".pool.target.path" --input-format "xml")" || true
  if [[ $target_old != "$target" ]]; then
    if [[ $target_old != "null" ]]; then
      sudo virsh pool-destroy "$pool"
      sudo virsh pool-undefine "$pool"
    fi
    mkdir --parents --verbose "$target"
    sudo virsh pool-define-as "$pool" "dir" --target "$target"
    sudo virsh pool-autostart "$pool"
    sudo virsh pool-start "$pool"
  fi
}
pool-define "default" "$HOME/libvirt/images"
pool-define "ISO" "$HOME/Downloads/ISO"
