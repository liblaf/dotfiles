#!/bin/bash
# -*- mode: sh; -*-
# @option    --ipapi_is_key='{{ (rbwFields "ipapi.is").API_KEY.value }}'
# @option    --namespace-id='{{ (rbwFields "API").NAMESPACE_ID.value }}'
# @option -p --port='{{ .ports.proxy }}'
# @option -w --working-dir='{{ joinPath .chezmoi.homeDir "mihomo" }}'
# @meta require-tool clash-meta
# @meta require-tool sub-store
# @meta require-tool wrangler
set -o errexit
set -o nounset
set -o pipefail

function get() {
  local key="$1"
  wrangler kv key get "$key" --namespace-id "$namespace_id" --remote |
    sed "1 { /Proxy environment variables detected. We'll use your proxy for fetch requests./d }"
}

function put() {
  local key="$1"
  local path="$2"
  wrangler kv key put "$key" --namespace-id "$namespace_id" --path "$path" --remote
}

function main() {
  local ipapi_is_key="${argc_ipapi_is_key:?}"
  local namespace_id="${argc_namespace_id:?}"
  local port="${argc_port:?}"
  local working_dir="${argc_working_dir:?}"
  mkdir --parents --verbose "$working_dir"
  get 'profile.yaml' > "$working_dir/profile.yaml"
  xhs --output "$working_dir/mihomo.template.yaml" --download GET \
    'https://raw.githubusercontent.com/liblaf/sub-store/refs/heads/main/templates/mihomo/default.yaml'
  sub-store mihomo \
    --key "$ipapi_is_key" \
    --output "$working_dir/mihomo.yaml" \
    --port "$port" \
    --profile "$working_dir/profile.yaml" \
    --template "$working_dir/mihomo.template.yaml"
  clash-meta -f "$working_dir/mihomo.yaml" -t # test configuration
  put 'mihomo.yaml' "$working_dir/mihomo.yaml"
}

eval "$(argc --argc-eval "$0" "$@")"
