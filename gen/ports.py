import functools
import hashlib
import os
import sys
from pathlib import Path
from typing import Any, NamedTuple

import tomlkit


def data_file() -> Path:
    source_dir: str | None = os.getenv("CHEZMOI_SOURCE_DIR")
    assert source_dir is not None
    return Path(source_dir) / ".chezmoidata" / "ports.toml"


def save_data(data: Any) -> None:
    fpath: Path = data_file()
    with fpath.open("w") as fp:
        fp.write("""\
# This file is @generated by `gen/ports.py`.
# DO NOT EDIT!
""")
        tomlkit.dump(data, fp)


@functools.cache
def local_port_range() -> tuple[int, int]:
    ports: list[int] = [
        int(s)
        for s in Path("/proc/sys/net/ipv4/ip_local_port_range").read_text().split()
    ]
    assert len(ports) == 2
    return ports[0], ports[1]


class Service(NamedTuple):
    name: str
    public: bool = False

    @property
    def slug(self) -> str:
        return self.name.lower().replace(" ", "_").replace("-", "_")

    @property
    def port(self) -> int:
        hashsum: int = int(hashlib.blake2b(self.name.encode()).hexdigest()[:4], base=16)
        low: int
        high: int
        low, high = local_port_range()
        available_ports: range = range(low, high) if self.public else range(high, 65536)
        return available_ports[hashsum % len(available_ports)]


SERVICES: list[Service] = [
    Service("DVC"),
    Service("GPT Academic"),
    Service("HTTP"),
    Service("HTTPS", public=True),
    Service("MLflow"),
    Service("Proxy"),
    Service("Restic"),
    Service("SSH", public=True),
    Service("Stirling-PDF"),
    Service("WebDAV"),
]


def main() -> None:
    data: dict[str, int] = {}
    for s in SERVICES:
        print(f"Service Port > {s.name}: {s.port}", file=sys.stderr)
        data[s.slug] = s.port
    save_data({"ports": data})


if __name__ == "__main__":
    main()
